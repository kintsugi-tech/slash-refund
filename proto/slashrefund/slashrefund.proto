syntax = "proto3";
package madeinblock.slashrefund.slashrefund;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/made-in-block/slash-refund/x/slashrefund/types";

message Params {
    option (gogoproto.goproto_stringer) = false;
    
    repeated string allowedTokens       = 1 [(gogoproto.moretags) = "yaml:\"allowed_tokens\""];
    uint32 max_entries                  = 2;
}

message Deposit {
    string depositor_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; 
    string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; 
    string shares            = 3 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}

// TODO: to account for more than one token, Tokens and Shares must be a struct.
message DepositPool {
    string operator_address         = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; 
    cosmos.base.v1beta1.Coin tokens = 2 [(gogoproto.nullable) = false];
    string shares                   = 3 [
        (gogoproto.moretags)   = "yaml:\"depositor_shares\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}
  
message UnbondingDeposit {
    string depositorAddress                = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    string validatorAddress                = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    repeated UnbondingDepositEntry entries = 3 [(gogoproto.nullable) = false];
}

message UnbondingDepositEntry {
    int64 creation_height                     = 1;
    google.protobuf.Timestamp completion_time = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.stdtime)  = true
    ];
    string initial_balance = 3 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.nullable)   = false
    ];
    string balance = 4 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
        (gogoproto.nullable)   = false
    ];
}

message Refund {
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; 
    string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"]; 
    string shares            = 3 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}

// TODO: to account for more than one token, Tokens and Shares must be a struct.
message RefundPool {
    string operator_address         = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"]; 
    cosmos.base.v1beta1.Coin tokens = 2 [(gogoproto.nullable) = false];
    string shares                   = 3 [
        (gogoproto.moretags)   = "yaml:\"refund_shares\"",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}

message DVPair {
    string depositorAddress = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    string validatorAddress = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
  
message DVPairs {
    repeated DVPair pairs = 1 [(gogoproto.nullable) = false];
}
    