// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slashrefund/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetDepositRequest struct {
	DepositorAddress string `protobuf:"bytes,1,opt,name=depositorAddress,proto3" json:"depositorAddress,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *QueryGetDepositRequest) Reset()         { *m = QueryGetDepositRequest{} }
func (m *QueryGetDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositRequest) ProtoMessage()    {}
func (*QueryGetDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{2}
}
func (m *QueryGetDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositRequest.Merge(m, src)
}
func (m *QueryGetDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositRequest proto.InternalMessageInfo

func (m *QueryGetDepositRequest) GetDepositorAddress() string {
	if m != nil {
		return m.DepositorAddress
	}
	return ""
}

func (m *QueryGetDepositRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryGetDepositResponse struct {
	Deposit Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit"`
}

func (m *QueryGetDepositResponse) Reset()         { *m = QueryGetDepositResponse{} }
func (m *QueryGetDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositResponse) ProtoMessage()    {}
func (*QueryGetDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{3}
}
func (m *QueryGetDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositResponse.Merge(m, src)
}
func (m *QueryGetDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositResponse proto.InternalMessageInfo

func (m *QueryGetDepositResponse) GetDeposit() Deposit {
	if m != nil {
		return m.Deposit
	}
	return Deposit{}
}

type QueryAllDepositRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositRequest) Reset()         { *m = QueryAllDepositRequest{} }
func (m *QueryAllDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositRequest) ProtoMessage()    {}
func (*QueryAllDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{4}
}
func (m *QueryAllDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositRequest.Merge(m, src)
}
func (m *QueryAllDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositRequest proto.InternalMessageInfo

func (m *QueryAllDepositRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDepositResponse struct {
	Deposit    []Deposit           `protobuf:"bytes,1,rep,name=deposit,proto3" json:"deposit"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositResponse) Reset()         { *m = QueryAllDepositResponse{} }
func (m *QueryAllDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositResponse) ProtoMessage()    {}
func (*QueryAllDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{5}
}
func (m *QueryAllDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositResponse.Merge(m, src)
}
func (m *QueryAllDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositResponse proto.InternalMessageInfo

func (m *QueryAllDepositResponse) GetDeposit() []Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *QueryAllDepositResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDepositPoolRequest struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
}

func (m *QueryGetDepositPoolRequest) Reset()         { *m = QueryGetDepositPoolRequest{} }
func (m *QueryGetDepositPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositPoolRequest) ProtoMessage()    {}
func (*QueryGetDepositPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{6}
}
func (m *QueryGetDepositPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositPoolRequest.Merge(m, src)
}
func (m *QueryGetDepositPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositPoolRequest proto.InternalMessageInfo

func (m *QueryGetDepositPoolRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type QueryGetDepositPoolResponse struct {
	DepositPool DepositPool `protobuf:"bytes,1,opt,name=depositPool,proto3" json:"depositPool"`
}

func (m *QueryGetDepositPoolResponse) Reset()         { *m = QueryGetDepositPoolResponse{} }
func (m *QueryGetDepositPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDepositPoolResponse) ProtoMessage()    {}
func (*QueryGetDepositPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{7}
}
func (m *QueryGetDepositPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDepositPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDepositPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDepositPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDepositPoolResponse.Merge(m, src)
}
func (m *QueryGetDepositPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDepositPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDepositPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDepositPoolResponse proto.InternalMessageInfo

func (m *QueryGetDepositPoolResponse) GetDepositPool() DepositPool {
	if m != nil {
		return m.DepositPool
	}
	return DepositPool{}
}

type QueryAllDepositPoolRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositPoolRequest) Reset()         { *m = QueryAllDepositPoolRequest{} }
func (m *QueryAllDepositPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositPoolRequest) ProtoMessage()    {}
func (*QueryAllDepositPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{8}
}
func (m *QueryAllDepositPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositPoolRequest.Merge(m, src)
}
func (m *QueryAllDepositPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositPoolRequest proto.InternalMessageInfo

func (m *QueryAllDepositPoolRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDepositPoolResponse struct {
	DepositPool []DepositPool       `protobuf:"bytes,1,rep,name=depositPool,proto3" json:"depositPool"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDepositPoolResponse) Reset()         { *m = QueryAllDepositPoolResponse{} }
func (m *QueryAllDepositPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDepositPoolResponse) ProtoMessage()    {}
func (*QueryAllDepositPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{9}
}
func (m *QueryAllDepositPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDepositPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDepositPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDepositPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDepositPoolResponse.Merge(m, src)
}
func (m *QueryAllDepositPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDepositPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDepositPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDepositPoolResponse proto.InternalMessageInfo

func (m *QueryAllDepositPoolResponse) GetDepositPool() []DepositPool {
	if m != nil {
		return m.DepositPool
	}
	return nil
}

func (m *QueryAllDepositPoolResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUnbondingDepositRequest struct {
	DepositorAddress string `protobuf:"bytes,1,opt,name=depositorAddress,proto3" json:"depositorAddress,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *QueryGetUnbondingDepositRequest) Reset()         { *m = QueryGetUnbondingDepositRequest{} }
func (m *QueryGetUnbondingDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnbondingDepositRequest) ProtoMessage()    {}
func (*QueryGetUnbondingDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{10}
}
func (m *QueryGetUnbondingDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnbondingDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnbondingDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnbondingDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnbondingDepositRequest.Merge(m, src)
}
func (m *QueryGetUnbondingDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnbondingDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnbondingDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnbondingDepositRequest proto.InternalMessageInfo

func (m *QueryGetUnbondingDepositRequest) GetDepositorAddress() string {
	if m != nil {
		return m.DepositorAddress
	}
	return ""
}

func (m *QueryGetUnbondingDepositRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryGetUnbondingDepositResponse struct {
	UnbondingDeposit UnbondingDeposit `protobuf:"bytes,1,opt,name=unbondingDeposit,proto3" json:"unbondingDeposit"`
}

func (m *QueryGetUnbondingDepositResponse) Reset()         { *m = QueryGetUnbondingDepositResponse{} }
func (m *QueryGetUnbondingDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnbondingDepositResponse) ProtoMessage()    {}
func (*QueryGetUnbondingDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{11}
}
func (m *QueryGetUnbondingDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnbondingDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnbondingDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnbondingDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnbondingDepositResponse.Merge(m, src)
}
func (m *QueryGetUnbondingDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnbondingDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnbondingDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnbondingDepositResponse proto.InternalMessageInfo

func (m *QueryGetUnbondingDepositResponse) GetUnbondingDeposit() UnbondingDeposit {
	if m != nil {
		return m.UnbondingDeposit
	}
	return UnbondingDeposit{}
}

type QueryAllUnbondingDepositRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnbondingDepositRequest) Reset()         { *m = QueryAllUnbondingDepositRequest{} }
func (m *QueryAllUnbondingDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUnbondingDepositRequest) ProtoMessage()    {}
func (*QueryAllUnbondingDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{12}
}
func (m *QueryAllUnbondingDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnbondingDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnbondingDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnbondingDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnbondingDepositRequest.Merge(m, src)
}
func (m *QueryAllUnbondingDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnbondingDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnbondingDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnbondingDepositRequest proto.InternalMessageInfo

func (m *QueryAllUnbondingDepositRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUnbondingDepositResponse struct {
	UnbondingDeposit []UnbondingDeposit  `protobuf:"bytes,1,rep,name=unbondingDeposit,proto3" json:"unbondingDeposit"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnbondingDepositResponse) Reset()         { *m = QueryAllUnbondingDepositResponse{} }
func (m *QueryAllUnbondingDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUnbondingDepositResponse) ProtoMessage()    {}
func (*QueryAllUnbondingDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{13}
}
func (m *QueryAllUnbondingDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnbondingDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnbondingDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnbondingDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnbondingDepositResponse.Merge(m, src)
}
func (m *QueryAllUnbondingDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnbondingDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnbondingDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnbondingDepositResponse proto.InternalMessageInfo

func (m *QueryAllUnbondingDepositResponse) GetUnbondingDeposit() []UnbondingDeposit {
	if m != nil {
		return m.UnbondingDeposit
	}
	return nil
}

func (m *QueryAllUnbondingDepositResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRefundPoolRequest struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
}

func (m *QueryGetRefundPoolRequest) Reset()         { *m = QueryGetRefundPoolRequest{} }
func (m *QueryGetRefundPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRefundPoolRequest) ProtoMessage()    {}
func (*QueryGetRefundPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{14}
}
func (m *QueryGetRefundPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRefundPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRefundPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRefundPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRefundPoolRequest.Merge(m, src)
}
func (m *QueryGetRefundPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRefundPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRefundPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRefundPoolRequest proto.InternalMessageInfo

func (m *QueryGetRefundPoolRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

type QueryGetRefundPoolResponse struct {
	RefundPool RefundPool `protobuf:"bytes,1,opt,name=refundPool,proto3" json:"refundPool"`
}

func (m *QueryGetRefundPoolResponse) Reset()         { *m = QueryGetRefundPoolResponse{} }
func (m *QueryGetRefundPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRefundPoolResponse) ProtoMessage()    {}
func (*QueryGetRefundPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{15}
}
func (m *QueryGetRefundPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRefundPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRefundPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRefundPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRefundPoolResponse.Merge(m, src)
}
func (m *QueryGetRefundPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRefundPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRefundPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRefundPoolResponse proto.InternalMessageInfo

func (m *QueryGetRefundPoolResponse) GetRefundPool() RefundPool {
	if m != nil {
		return m.RefundPool
	}
	return RefundPool{}
}

type QueryAllRefundPoolRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRefundPoolRequest) Reset()         { *m = QueryAllRefundPoolRequest{} }
func (m *QueryAllRefundPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRefundPoolRequest) ProtoMessage()    {}
func (*QueryAllRefundPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{16}
}
func (m *QueryAllRefundPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRefundPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRefundPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRefundPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRefundPoolRequest.Merge(m, src)
}
func (m *QueryAllRefundPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRefundPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRefundPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRefundPoolRequest proto.InternalMessageInfo

func (m *QueryAllRefundPoolRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRefundPoolResponse struct {
	RefundPool []RefundPool        `protobuf:"bytes,1,rep,name=refundPool,proto3" json:"refundPool"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRefundPoolResponse) Reset()         { *m = QueryAllRefundPoolResponse{} }
func (m *QueryAllRefundPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRefundPoolResponse) ProtoMessage()    {}
func (*QueryAllRefundPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4feae7a7aa6dd2, []int{17}
}
func (m *QueryAllRefundPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRefundPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRefundPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRefundPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRefundPoolResponse.Merge(m, src)
}
func (m *QueryAllRefundPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRefundPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRefundPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRefundPoolResponse proto.InternalMessageInfo

func (m *QueryAllRefundPoolResponse) GetRefundPool() []RefundPool {
	if m != nil {
		return m.RefundPool
	}
	return nil
}

func (m *QueryAllRefundPoolResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryParamsResponse")
	proto.RegisterType((*QueryGetDepositRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryGetDepositRequest")
	proto.RegisterType((*QueryGetDepositResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryGetDepositResponse")
	proto.RegisterType((*QueryAllDepositRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryAllDepositRequest")
	proto.RegisterType((*QueryAllDepositResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryAllDepositResponse")
	proto.RegisterType((*QueryGetDepositPoolRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryGetDepositPoolRequest")
	proto.RegisterType((*QueryGetDepositPoolResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryGetDepositPoolResponse")
	proto.RegisterType((*QueryAllDepositPoolRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryAllDepositPoolRequest")
	proto.RegisterType((*QueryAllDepositPoolResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryAllDepositPoolResponse")
	proto.RegisterType((*QueryGetUnbondingDepositRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryGetUnbondingDepositRequest")
	proto.RegisterType((*QueryGetUnbondingDepositResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryGetUnbondingDepositResponse")
	proto.RegisterType((*QueryAllUnbondingDepositRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryAllUnbondingDepositRequest")
	proto.RegisterType((*QueryAllUnbondingDepositResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryAllUnbondingDepositResponse")
	proto.RegisterType((*QueryGetRefundPoolRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryGetRefundPoolRequest")
	proto.RegisterType((*QueryGetRefundPoolResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryGetRefundPoolResponse")
	proto.RegisterType((*QueryAllRefundPoolRequest)(nil), "madeinblock.slashrefund.slashrefund.QueryAllRefundPoolRequest")
	proto.RegisterType((*QueryAllRefundPoolResponse)(nil), "madeinblock.slashrefund.slashrefund.QueryAllRefundPoolResponse")
}

func init() { proto.RegisterFile("slashrefund/query.proto", fileDescriptor_8e4feae7a7aa6dd2) }

var fileDescriptor_8e4feae7a7aa6dd2 = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xdf, 0x6b, 0xe4, 0x54,
	0x14, 0xc7, 0xe7, 0xce, 0x68, 0x17, 0x4f, 0xd1, 0x2d, 0x77, 0x17, 0x77, 0x37, 0xea, 0xec, 0x92,
	0x05, 0x5d, 0x56, 0x9b, 0x6c, 0x77, 0x6d, 0x6b, 0x69, 0x69, 0x9d, 0xd2, 0x1f, 0x0a, 0x2a, 0x75,
	0xa4, 0x28, 0x82, 0xb4, 0x99, 0x49, 0x4c, 0x83, 0x99, 0xdc, 0x34, 0xc9, 0x54, 0x4b, 0xe9, 0x8b,
	0x4f, 0x82, 0x2f, 0x82, 0xff, 0x88, 0xe0, 0xab, 0x60, 0x1f, 0xfb, 0x22, 0x54, 0xf4, 0xc1, 0x07,
	0x91, 0xd2, 0xd1, 0xff, 0x43, 0x72, 0x73, 0x62, 0xee, 0x24, 0x33, 0x35, 0x49, 0xc3, 0x3e, 0x75,
	0xb8, 0x3f, 0xbe, 0xe7, 0x7c, 0xbe, 0xe7, 0xe6, 0xe6, 0xa4, 0x70, 0xcb, 0xb7, 0x35, 0x7f, 0xcf,
	0x33, 0x3e, 0xef, 0x3b, 0xba, 0xba, 0xdf, 0x37, 0xbc, 0x43, 0xc5, 0xf5, 0x58, 0xc0, 0xe8, 0xfd,
	0x9e, 0xa6, 0x1b, 0x96, 0xd3, 0xb1, 0x59, 0xf7, 0x0b, 0x45, 0x58, 0x24, 0xfe, 0x96, 0x6e, 0x9a,
	0xcc, 0x64, 0x7c, 0xbd, 0x1a, 0xfe, 0x8a, 0xb6, 0x4a, 0x2f, 0x9b, 0x8c, 0x99, 0xb6, 0xa1, 0x6a,
	0xae, 0xa5, 0x6a, 0x8e, 0xc3, 0x02, 0x2d, 0xb0, 0x98, 0xe3, 0xe3, 0xec, 0xc3, 0x2e, 0xf3, 0x7b,
	0xcc, 0x57, 0x3b, 0x9a, 0x6f, 0x44, 0x11, 0xd5, 0x83, 0x99, 0x8e, 0x11, 0x68, 0x33, 0xaa, 0xab,
	0x99, 0x96, 0xc3, 0x17, 0xe3, 0xda, 0xdb, 0x62, 0x76, 0xae, 0xe6, 0x69, 0xbd, 0x58, 0xe5, 0x8e,
	0x38, 0xa3, 0x1b, 0x2e, 0xf3, 0xad, 0x00, 0xa7, 0x9a, 0x23, 0xa6, 0x76, 0x5c, 0xc6, 0x6c, 0x9c,
	0xbf, 0x2f, 0xce, 0xf7, 0x9d, 0x0e, 0x73, 0x74, 0xcb, 0x31, 0x77, 0x86, 0x45, 0x5e, 0x11, 0x17,
	0x45, 0x7f, 0x04, 0x0d, 0xf9, 0x26, 0xd0, 0x0f, 0xc3, 0xd4, 0xb7, 0x78, 0x4e, 0x6d, 0x63, 0xbf,
	0x6f, 0xf8, 0x81, 0xbc, 0x0b, 0x37, 0x86, 0x46, 0x7d, 0x97, 0x39, 0xbe, 0x41, 0xdf, 0x85, 0x89,
	0x28, 0xf7, 0xdb, 0xe4, 0x1e, 0x79, 0x30, 0xf9, 0xf8, 0x75, 0x25, 0x87, 0xb7, 0x4a, 0x24, 0xb2,
	0xfa, 0xcc, 0xe9, 0x5f, 0x77, 0x6b, 0x6d, 0x14, 0x90, 0x5d, 0x78, 0x91, 0x47, 0xd8, 0x34, 0x82,
	0xb5, 0x28, 0x5f, 0x8c, 0x4d, 0x1f, 0xc2, 0x14, 0x12, 0x30, 0xaf, 0xa5, 0xeb, 0x9e, 0xe1, 0x47,
	0xe1, 0x9e, 0x6b, 0x67, 0xc6, 0xc3, 0xb5, 0x07, 0x9a, 0x6d, 0xe9, 0x9a, 0xb0, 0xb6, 0x1e, 0xad,
	0x4d, 0x8f, 0xcb, 0x26, 0xdc, 0xca, 0x44, 0x44, 0xae, 0xf7, 0xe0, 0x1a, 0x4a, 0x23, 0xd8, 0x1b,
	0xb9, 0xc0, 0x50, 0x06, 0xc9, 0x62, 0x09, 0x79, 0x17, 0xd1, 0x5a, 0xb6, 0x9d, 0x42, 0xdb, 0x00,
	0x48, 0x4e, 0x06, 0x86, 0x7a, 0x55, 0x89, 0x8e, 0x91, 0x12, 0x1e, 0x23, 0x25, 0x3a, 0xb8, 0x78,
	0x8c, 0x94, 0x2d, 0xcd, 0x34, 0x70, 0x6f, 0x5b, 0xd8, 0x29, 0xff, 0x40, 0x90, 0x45, 0x0c, 0x31,
	0x8a, 0xa5, 0x71, 0x45, 0x16, 0xba, 0x39, 0x94, 0x71, 0x9d, 0x67, 0xfc, 0xda, 0xff, 0x66, 0x1c,
	0xa5, 0x32, 0x94, 0xf2, 0x06, 0x48, 0x29, 0xf7, 0xb7, 0x18, 0xb3, 0x63, 0x63, 0x1e, 0xc0, 0x75,
	0xe6, 0x1a, 0x9e, 0x96, 0x29, 0x79, 0x7a, 0x58, 0xfe, 0x12, 0x5e, 0x1a, 0xa9, 0x83, 0xf4, 0x9f,
	0xc0, 0xa4, 0x9e, 0x0c, 0xa3, 0xc5, 0x8f, 0x8a, 0x38, 0x10, 0xee, 0x43, 0x17, 0x44, 0x29, 0x59,
	0x47, 0x80, 0xc4, 0x72, 0x11, 0xa0, 0xaa, 0xca, 0x9e, 0x10, 0xe4, 0x4b, 0x87, 0x19, 0xc7, 0xd7,
	0xa8, 0x88, 0xaf, 0xba, 0x4a, 0x1f, 0xc2, 0xdd, 0xb8, 0x42, 0xdb, 0xf1, 0x9d, 0xf4, 0x94, 0x1e,
	0xf1, 0x6f, 0x09, 0xdc, 0x1b, 0x1f, 0x1b, 0x2d, 0x34, 0x61, 0xaa, 0x9f, 0x9a, 0xc3, 0x82, 0xcd,
	0xe6, 0xf2, 0x31, 0x2d, 0x8c, 0x66, 0x66, 0x44, 0x65, 0x0b, 0x8d, 0x68, 0xd9, 0xf6, 0x38, 0x23,
	0xaa, 0x3a, 0x36, 0xbf, 0xc7, 0xe0, 0x23, 0x63, 0x5d, 0x0a, 0xde, 0xa8, 0x1c, 0xbc, 0xba, 0xa3,
	0xb4, 0x0e, 0x77, 0xe2, 0x72, 0xb6, 0x79, 0x0e, 0xe5, 0xee, 0x0c, 0x3f, 0xb9, 0x7b, 0x44, 0x19,
	0xb4, 0x65, 0x1b, 0xc0, 0xfb, 0x6f, 0x14, 0x6b, 0xa0, 0xe6, 0x32, 0x24, 0x11, 0x43, 0x2b, 0x04,
	0x21, 0xb9, 0x8b, 0xb9, 0xb7, 0x6c, 0x3b, 0x9b, 0x7b, 0x55, 0x75, 0xff, 0x89, 0x24, 0xb7, 0x52,
	0x0e, 0xb4, 0x46, 0x25, 0x68, 0x95, 0xd5, 0xf7, 0xf1, 0xcf, 0xd7, 0xe1, 0x59, 0x9e, 0x3e, 0xfd,
	0x91, 0xc0, 0x44, 0xd4, 0x27, 0xd0, 0xf9, 0x5c, 0x09, 0x66, 0x9b, 0x16, 0xe9, 0xad, 0xe2, 0x1b,
	0xa3, 0x9c, 0xe4, 0xb9, 0xaf, 0x7f, 0xfb, 0xfb, 0xfb, 0xfa, 0x23, 0xaa, 0xa8, 0xa1, 0xc2, 0xb4,
	0xe5, 0x4c, 0x73, 0x0d, 0x95, 0xef, 0x9b, 0xc6, 0xde, 0x29, 0xdb, 0xc1, 0xd1, 0x01, 0x81, 0x6b,
	0xf1, 0xa1, 0x5f, 0xcc, 0x1f, 0x3d, 0xd3, 0xf3, 0x48, 0x4b, 0xe5, 0x36, 0x63, 0xfa, 0x9f, 0xf1,
	0xf4, 0x3f, 0xa6, 0xdb, 0x79, 0xd3, 0xc7, 0x4b, 0x56, 0x3d, 0x4a, 0xdf, 0xb6, 0xc7, 0xea, 0x51,
	0xfa, 0x52, 0x3d, 0xa6, 0x27, 0x04, 0x00, 0x43, 0xb6, 0x6c, 0xbb, 0x08, 0x68, 0xa6, 0x03, 0x2a,
	0x02, 0x9a, 0xed, 0x6d, 0xe4, 0x79, 0x0e, 0x3a, 0x43, 0xd5, 0x82, 0xa0, 0xf4, 0x9c, 0xc0, 0xa4,
	0xf0, 0xfe, 0xa3, 0x2b, 0x65, 0xfc, 0x16, 0x1e, 0x60, 0xe9, 0xed, 0xf2, 0x02, 0xc8, 0xf2, 0x01,
	0x67, 0x79, 0x87, 0x6e, 0x14, 0x64, 0xe1, 0xcd, 0xbb, 0x7a, 0x94, 0xba, 0xe3, 0x8e, 0xe9, 0xaf,
	0x04, 0x5e, 0x10, 0xe2, 0x84, 0x95, 0x5a, 0x29, 0x63, 0x76, 0x49, 0xca, 0xd1, 0xfd, 0x8a, 0xbc,
	0xc4, 0x29, 0xe7, 0xe8, 0x9b, 0x65, 0x28, 0xe9, 0x37, 0x75, 0x98, 0x4a, 0xbf, 0x75, 0xe8, 0x5a,
	0x21, 0xeb, 0xc7, 0xbc, 0x79, 0xa5, 0xf5, 0x2b, 0xaa, 0x20, 0x9f, 0xc9, 0xf9, 0x34, 0xba, 0x93,
	0x97, 0x2f, 0xf3, 0x99, 0x96, 0xf3, 0x21, 0xfc, 0x87, 0xc0, 0x8d, 0x74, 0x16, 0x61, 0x8d, 0xd7,
	0x0a, 0x95, 0xa8, 0x02, 0x37, 0x2e, 0xe9, 0x30, 0xe4, 0x16, 0x77, 0x63, 0x91, 0x2e, 0x94, 0x76,
	0x83, 0xfe, 0x49, 0x00, 0x92, 0x97, 0x0f, 0x5d, 0x2e, 0x54, 0xa6, 0xcc, 0x8b, 0x56, 0x5a, 0x29,
	0xbd, 0x1f, 0x91, 0xde, 0xe7, 0x48, 0x9b, 0x74, 0x3d, 0x2f, 0x92, 0xf0, 0x89, 0x3d, 0xe2, 0x29,
	0xfd, 0x85, 0xc0, 0xf3, 0x49, 0x94, 0xb0, 0x80, 0xcb, 0x85, 0xac, 0xbf, 0x12, 0xe1, 0xc8, 0x26,
	0x41, 0x5e, 0xe4, 0x84, 0xb3, 0xf4, 0x49, 0x09, 0xc2, 0xd5, 0x8f, 0x4e, 0x2f, 0x9a, 0xe4, 0xec,
	0xa2, 0x49, 0xce, 0x2f, 0x9a, 0xe4, 0xbb, 0x41, 0xb3, 0x76, 0x36, 0x68, 0xd6, 0xfe, 0x18, 0x34,
	0x6b, 0x9f, 0x2e, 0x98, 0x56, 0xb0, 0xd7, 0xef, 0x28, 0x5d, 0xd6, 0xbb, 0x4c, 0xf8, 0xab, 0x21,
	0xe9, 0xe0, 0xd0, 0x35, 0xfc, 0xce, 0x04, 0xff, 0xd7, 0xc4, 0x93, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xf3, 0xa6, 0x87, 0x68, 0xd3, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Deposit by index.
	Deposit(ctx context.Context, in *QueryGetDepositRequest, opts ...grpc.CallOption) (*QueryGetDepositResponse, error)
	// Queries a list of Deposit items.
	DepositAll(ctx context.Context, in *QueryAllDepositRequest, opts ...grpc.CallOption) (*QueryAllDepositResponse, error)
	// Queries a DepositPool by index.
	DepositPool(ctx context.Context, in *QueryGetDepositPoolRequest, opts ...grpc.CallOption) (*QueryGetDepositPoolResponse, error)
	// Queries a list of DepositPool items.
	DepositPoolAll(ctx context.Context, in *QueryAllDepositPoolRequest, opts ...grpc.CallOption) (*QueryAllDepositPoolResponse, error)
	// Queries a UnbondingDeposit by index.
	UnbondingDeposit(ctx context.Context, in *QueryGetUnbondingDepositRequest, opts ...grpc.CallOption) (*QueryGetUnbondingDepositResponse, error)
	// Queries a list of UnbondingDeposit items.
	UnbondingDepositAll(ctx context.Context, in *QueryAllUnbondingDepositRequest, opts ...grpc.CallOption) (*QueryAllUnbondingDepositResponse, error)
	// Queries a RefundPool by index.
	RefundPool(ctx context.Context, in *QueryGetRefundPoolRequest, opts ...grpc.CallOption) (*QueryGetRefundPoolResponse, error)
	// Queries a list of RefundPool items.
	RefundPoolAll(ctx context.Context, in *QueryAllRefundPoolRequest, opts ...grpc.CallOption) (*QueryAllRefundPoolResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deposit(ctx context.Context, in *QueryGetDepositRequest, opts ...grpc.CallOption) (*QueryGetDepositResponse, error) {
	out := new(QueryGetDepositResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositAll(ctx context.Context, in *QueryAllDepositRequest, opts ...grpc.CallOption) (*QueryAllDepositResponse, error) {
	out := new(QueryAllDepositResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/DepositAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositPool(ctx context.Context, in *QueryGetDepositPoolRequest, opts ...grpc.CallOption) (*QueryGetDepositPoolResponse, error) {
	out := new(QueryGetDepositPoolResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/DepositPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositPoolAll(ctx context.Context, in *QueryAllDepositPoolRequest, opts ...grpc.CallOption) (*QueryAllDepositPoolResponse, error) {
	out := new(QueryAllDepositPoolResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/DepositPoolAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingDeposit(ctx context.Context, in *QueryGetUnbondingDepositRequest, opts ...grpc.CallOption) (*QueryGetUnbondingDepositResponse, error) {
	out := new(QueryGetUnbondingDepositResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/UnbondingDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnbondingDepositAll(ctx context.Context, in *QueryAllUnbondingDepositRequest, opts ...grpc.CallOption) (*QueryAllUnbondingDepositResponse, error) {
	out := new(QueryAllUnbondingDepositResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/UnbondingDepositAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefundPool(ctx context.Context, in *QueryGetRefundPoolRequest, opts ...grpc.CallOption) (*QueryGetRefundPoolResponse, error) {
	out := new(QueryGetRefundPoolResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/RefundPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RefundPoolAll(ctx context.Context, in *QueryAllRefundPoolRequest, opts ...grpc.CallOption) (*QueryAllRefundPoolResponse, error) {
	out := new(QueryAllRefundPoolResponse)
	err := c.cc.Invoke(ctx, "/madeinblock.slashrefund.slashrefund.Query/RefundPoolAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Deposit by index.
	Deposit(context.Context, *QueryGetDepositRequest) (*QueryGetDepositResponse, error)
	// Queries a list of Deposit items.
	DepositAll(context.Context, *QueryAllDepositRequest) (*QueryAllDepositResponse, error)
	// Queries a DepositPool by index.
	DepositPool(context.Context, *QueryGetDepositPoolRequest) (*QueryGetDepositPoolResponse, error)
	// Queries a list of DepositPool items.
	DepositPoolAll(context.Context, *QueryAllDepositPoolRequest) (*QueryAllDepositPoolResponse, error)
	// Queries a UnbondingDeposit by index.
	UnbondingDeposit(context.Context, *QueryGetUnbondingDepositRequest) (*QueryGetUnbondingDepositResponse, error)
	// Queries a list of UnbondingDeposit items.
	UnbondingDepositAll(context.Context, *QueryAllUnbondingDepositRequest) (*QueryAllUnbondingDepositResponse, error)
	// Queries a RefundPool by index.
	RefundPool(context.Context, *QueryGetRefundPoolRequest) (*QueryGetRefundPoolResponse, error)
	// Queries a list of RefundPool items.
	RefundPoolAll(context.Context, *QueryAllRefundPoolRequest) (*QueryAllRefundPoolResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Deposit(ctx context.Context, req *QueryGetDepositRequest) (*QueryGetDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedQueryServer) DepositAll(ctx context.Context, req *QueryAllDepositRequest) (*QueryAllDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAll not implemented")
}
func (*UnimplementedQueryServer) DepositPool(ctx context.Context, req *QueryGetDepositPoolRequest) (*QueryGetDepositPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPool not implemented")
}
func (*UnimplementedQueryServer) DepositPoolAll(ctx context.Context, req *QueryAllDepositPoolRequest) (*QueryAllDepositPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPoolAll not implemented")
}
func (*UnimplementedQueryServer) UnbondingDeposit(ctx context.Context, req *QueryGetUnbondingDepositRequest) (*QueryGetUnbondingDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingDeposit not implemented")
}
func (*UnimplementedQueryServer) UnbondingDepositAll(ctx context.Context, req *QueryAllUnbondingDepositRequest) (*QueryAllUnbondingDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbondingDepositAll not implemented")
}
func (*UnimplementedQueryServer) RefundPool(ctx context.Context, req *QueryGetRefundPoolRequest) (*QueryGetRefundPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPool not implemented")
}
func (*UnimplementedQueryServer) RefundPoolAll(ctx context.Context, req *QueryAllRefundPoolRequest) (*QueryAllRefundPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPoolAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deposit(ctx, req.(*QueryGetDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/DepositAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositAll(ctx, req.(*QueryAllDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDepositPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/DepositPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositPool(ctx, req.(*QueryGetDepositPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositPoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDepositPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositPoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/DepositPoolAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositPoolAll(ctx, req.(*QueryAllDepositPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnbondingDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/UnbondingDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingDeposit(ctx, req.(*QueryGetUnbondingDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnbondingDepositAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUnbondingDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnbondingDepositAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/UnbondingDepositAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnbondingDepositAll(ctx, req.(*QueryAllUnbondingDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefundPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRefundPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefundPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/RefundPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefundPool(ctx, req.(*QueryGetRefundPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RefundPoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRefundPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RefundPoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/madeinblock.slashrefund.slashrefund.Query/RefundPoolAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RefundPoolAll(ctx, req.(*QueryAllRefundPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "madeinblock.slashrefund.slashrefund.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Query_Deposit_Handler,
		},
		{
			MethodName: "DepositAll",
			Handler:    _Query_DepositAll_Handler,
		},
		{
			MethodName: "DepositPool",
			Handler:    _Query_DepositPool_Handler,
		},
		{
			MethodName: "DepositPoolAll",
			Handler:    _Query_DepositPoolAll_Handler,
		},
		{
			MethodName: "UnbondingDeposit",
			Handler:    _Query_UnbondingDeposit_Handler,
		},
		{
			MethodName: "UnbondingDepositAll",
			Handler:    _Query_UnbondingDepositAll_Handler,
		},
		{
			MethodName: "RefundPool",
			Handler:    _Query_RefundPool_Handler,
		},
		{
			MethodName: "RefundPoolAll",
			Handler:    _Query_RefundPoolAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slashrefund/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositorAddress) > 0 {
		i -= len(m.DepositorAddress)
		copy(dAtA[i:], m.DepositorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDepositPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDepositPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDepositPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DepositPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDepositPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDepositPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDepositPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositPool) > 0 {
		for iNdEx := len(m.DepositPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnbondingDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnbondingDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnbondingDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DepositorAddress) > 0 {
		i -= len(m.DepositorAddress)
		copy(dAtA[i:], m.DepositorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnbondingDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnbondingDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnbondingDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnbondingDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUnbondingDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnbondingDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnbondingDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUnbondingDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnbondingDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnbondingDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDeposit) > 0 {
		for iNdEx := len(m.UnbondingDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRefundPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRefundPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRefundPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRefundPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRefundPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRefundPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RefundPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllRefundPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRefundPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRefundPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRefundPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRefundPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRefundPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RefundPool) > 0 {
		for iNdEx := len(m.RefundPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDepositPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDepositPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DepositPool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDepositPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDepositPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DepositPool) > 0 {
		for _, e := range m.DepositPool {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnbondingDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUnbondingDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnbondingDeposit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUnbondingDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUnbondingDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDeposit) > 0 {
		for _, e := range m.UnbondingDeposit {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRefundPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRefundPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RefundPool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllRefundPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRefundPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RefundPool) > 0 {
		for _, e := range m.RefundPool {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, Deposit{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDepositPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDepositPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDepositPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDepositPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDepositPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDepositPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositPool = append(m.DepositPool, DepositPool{})
			if err := m.DepositPool[len(m.DepositPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnbondingDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnbondingDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnbondingDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnbondingDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnbondingDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnbondingDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnbondingDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnbondingDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnbondingDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnbondingDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnbondingDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnbondingDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDeposit = append(m.UnbondingDeposit, UnbondingDeposit{})
			if err := m.UnbondingDeposit[len(m.UnbondingDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRefundPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRefundPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRefundPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRefundPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRefundPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRefundPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RefundPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRefundPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRefundPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRefundPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRefundPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRefundPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRefundPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundPool = append(m.RefundPool, RefundPool{})
			if err := m.RefundPool[len(m.RefundPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
